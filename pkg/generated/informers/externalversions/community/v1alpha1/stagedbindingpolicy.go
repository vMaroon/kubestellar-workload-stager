/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	communityv1alpha1 "github.com/vMaroon/kubestellar-workload-stager/api/community/v1alpha1"
	versioned "github.com/vMaroon/kubestellar-workload-stager/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/vMaroon/kubestellar-workload-stager/pkg/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/vMaroon/kubestellar-workload-stager/pkg/generated/listers/community/v1alpha1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// StagedBindingPolicyInformer provides access to a shared informer and lister for
// StagedBindingPolicies.
type StagedBindingPolicyInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.StagedBindingPolicyLister
}

type stagedBindingPolicyInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewStagedBindingPolicyInformer constructs a new informer for StagedBindingPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewStagedBindingPolicyInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredStagedBindingPolicyInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredStagedBindingPolicyInformer constructs a new informer for StagedBindingPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredStagedBindingPolicyInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CommunityV1alpha1().StagedBindingPolicies().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CommunityV1alpha1().StagedBindingPolicies().Watch(context.TODO(), options)
			},
		},
		&communityv1alpha1.StagedBindingPolicy{},
		resyncPeriod,
		indexers,
	)
}

func (f *stagedBindingPolicyInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredStagedBindingPolicyInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *stagedBindingPolicyInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&communityv1alpha1.StagedBindingPolicy{}, f.defaultInformer)
}

func (f *stagedBindingPolicyInformer) Lister() v1alpha1.StagedBindingPolicyLister {
	return v1alpha1.NewStagedBindingPolicyLister(f.Informer().GetIndexer())
}
